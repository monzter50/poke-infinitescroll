{"version":3,"sources":["pokeball.svg","Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","name","className","src","alt","App","_isMounted","handleScrolling","state","scrolling","lastUser","document","querySelector","lastUserOffset","offsetTop","clientHeight","window","pageYOffset","innerHeight","loadMore","loadUsers","prevTotal","pokemons","setState","loading","fetch","process","then","response","json","myJson","results","finally","prevState","this","scrollListener","addEventListener","e","map","pokemon","index","key","Pokeball","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,sC,uNCuB5BC,G,MAnBF,SAACC,GAAW,IAErBC,EACED,EADFC,KAEF,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,cAAcC,IAAG,4CAAuCF,EAAvC,QAAmDG,IAAI,KACvF,yBAAKF,UAAU,oBACb,4BACGD,O,gBCgFII,G,kBAjFb,WAAYL,GAAQ,IAAD,8BACjB,4CAAMA,KAHRM,YAAa,EAEM,EAoBnBC,gBAAkB,WAEhB,IADsB,EAAKC,MAAnBC,UACR,CACA,IAAMC,EAAWC,SAASC,cACxB,wCAEIC,EAAiBH,EAASI,UAAYJ,EAASK,aAClCC,OAAOC,YAAcD,OAAOE,YAE9BL,EADI,IAC2B,EAAKM,aA7BpC,EAgCnBC,UAAY,WAAO,IAAD,EACgB,EAAKZ,MAA7Ba,EADQ,EACRA,UAAWC,EADH,EACGA,SACnB,EAAKC,SAAS,CAAEC,SAAS,IACzBC,MAAM,GAAD,OAAIC,4BAAJ,4BAA0DL,IAC5DM,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAY,EAAKP,SAAS,CAC9BD,SAAS,GAAD,mBAAMA,GAAN,YAAmBQ,EAAOC,eAEnCC,SAAQ,kBAAM,EAAKT,SAAS,CAAEC,SAAS,QAxCzB,EA2CnBL,SAAW,WACT,EAAKI,UACH,SAACU,GAAD,MAAgB,CACdZ,UAAWY,EAAUZ,UAAY,MAEnC,EAAKD,YA9CP,EAAKZ,MAAQ,CACXc,SAAU,GACVD,UAAW,EACXZ,WAAW,EACXe,SAAS,GANM,E,iFAUE,IAAD,OAClBU,KAAK5B,YAAa,EAClB4B,KAAKd,YACLc,KAAKC,eAAiBnB,OAAOoB,iBAAiB,UAAU,SAACC,GAAD,OAAO,EAAK9B,gBAAgB8B,Q,6CAIpFH,KAAK5B,YAAa,I,+BAmCV,IAAD,EACuB4B,KAAK1B,MAA3Bc,EADD,EACCA,SAAUE,EADX,EACWA,QAClB,OACE,yBAAKtB,UAAU,kBACb,+CACA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SACZoB,EAASgB,KAAI,SAACC,EAASC,GAAV,OACZ,kBAAC,EAAD,iBACMD,EADN,CAEEE,IAAKD,SAKVhB,GACC,yBAAKtB,UAAU,WACb,8BACE,yBAAKC,IAAKuC,IAAUxC,UAAU,WAAWE,IAAI,a,GAzE3CuC,cCOEC,QACW,cAA7B5B,OAAO6B,SAASC,UAEkB,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MAC1B,2DCfNC,IAASC,OAAO,kBAAC,EAAD,MAAStC,SAASuC,eAAe,SDgI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAC2B,GAClCA,EAAaC,kB","file":"static/js/main.f1345a06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.86a7ae01.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Card.css';\n\nconst Card = (props) => {\n  const {\n    name,\n  } = props;\n  return (\n    <div className=\"card-user\">\n      <img className=\"card-avatar\" src={`https://img.pokemondb.net/artwork/${name}.jpg`} alt=\"\" />\n      <div className=\"card-description\">\n        <h2>\n          {name}\n        </h2>\n      </div>\n\n    </div>\n  );\n};\nCard.propTypes = {\n  name: PropTypes.string.isRequired,\n};\nexport default Card;\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-undef */\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { Component } from 'react';\nimport Card from './Card';\nimport Pokeball from './pokeball.svg';\nimport './App.css';\n\nclass App extends Component {\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      pokemons: [],\n      prevTotal: 0,\n      scrolling: false,\n      loading: false,\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.loadUsers();\n    this.scrollListener = window.addEventListener('scroll', (e) => this.handleScrolling(e));\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  handleScrolling = () => {\n    const { scrolling } = this.state;\n    if (scrolling) return;\n    const lastUser = document.querySelector(\n      'div.cards > div.card-user:last-child',\n    );\n    const lastUserOffset = lastUser.offsetTop + lastUser.clientHeight;\n    const pageOffset = window.pageYOffset + window.innerHeight;\n    const bottomOffset = 20;\n    if (pageOffset > lastUserOffset - bottomOffset) this.loadMore();\n  };\n\n  loadUsers = () => {\n    const { prevTotal, pokemons } = this.state;\n    this.setState({ loading: true });\n    fetch(`${process.env.REACT_APP_BASE_API_URL}/pokemon/?offset=${prevTotal}`)\n      .then((response) => response.json())\n      .then((myJson) => this.setState({\n        pokemons: [...pokemons, ...myJson.results],\n      }))\n      .finally(() => this.setState({ loading: false }));\n  };\n\n  loadMore = () => {\n    this.setState(\n      (prevState) => ({\n        prevTotal: prevState.prevTotal + 10,\n      }),\n      this.loadUsers,\n    );\n  };\n\n  render() {\n    const { pokemons, loading } = this.state;\n    return (\n      <div className=\"App App-header\">\n        <h1>Infinite Scroll</h1>\n        <div className=\"container\">\n          <div className=\"cards\">\n            {pokemons.map((pokemon, index) => (\n              <Card\n                {...pokemon}\n                key={index}\n              />\n            ))}\n\n          </div>\n          {loading && (\n            <div className=\"loading\">\n              <span>\n                <img src={Pokeball} className=\"pokeball\" alt=\"\" />\n              </span>\n            </div>\n          )}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-undef */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line no-undef\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}